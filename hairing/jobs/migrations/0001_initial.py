# Generated by Django 5.1.1 on 2024-10-03 00:45

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Vaga',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255)),
                ('faixa_salarial', models.CharField(choices=[('0-1000', 'Até 1.000'), ('1000-2000', 'De 1.000 a 2.000'), ('2000-3000', 'De 2.000 a 3.000'), ('3000+', 'Acima de 3.000')], max_length=10)),
                ('requisitos', models.TextField()),
                ('escolaridade_minima', models.CharField(choices=[('EF', 'Ensino Fundamental'), ('EM', 'Ensino Médio'), ('TEC', 'Tecnólogo'), ('ES', 'Ensino Superior'), ('MBA', 'Pós / MBA / Mestrado'), ('DR', 'Doutorado')], max_length=3)),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Candidato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255)),
                ('pretensao_salarial', models.CharField(choices=[('0-1000', 'Até 1.000'), ('1000-2000', 'De 1.000 a 2.000'), ('2000-3000', 'De 2.000 a 3.000'), ('3000+', 'Acima de 3.000')], max_length=10)),
                ('experiencia', models.TextField()),
                ('escolaridade', models.CharField(choices=[('EF', 'Ensino Fundamental'), ('EM', 'Ensino Médio'), ('TEC', 'Tecnólogo'), ('ES', 'Ensino Superior'), ('MBA', 'Pós / MBA / Mestrado'), ('DR', 'Doutorado')], max_length=3)),
                ('vaga', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidatos', to='jobs.vaga')),
            ],
        ),
    ]
